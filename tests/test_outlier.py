# -*- coding: utf-8 -*-
"""test_outlier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSrruPOtuk3-iM0GM2KUPeHp8WDRTgnb
"""
import sys
sys.path.insert(0, '/home/yutika/MLops_project/Parkinson-s-Prediction/scripts')

import unittest
import pandas as pd
import numpy as np
from clean_outlier import clean_outliers, generate_outlier_report

class TestOutlierTreatment(unittest.TestCase):
    def setUp(self):
        """Create synthetic test data with known outliers"""
        np.random.seed(42)
        self.test_data = pd.DataFrame({
            'NP3TOT': [20, 25, 22, 100, 24, 23, 21, 150, 26, 200],
            'NP2SPCH': [1, 2, 1, 15, 2, 1, 2, 20, 1, 2],
            'NP1DPRS': [2, 3, 2, 20, 3, 2, 3, 25, 2, 30],
            'ENROLL_AGE': [65, 70, 68, 150, 67, 71, 69, 25, 72, 200],
            'COHORT': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  # Non-numeric column
        })

    def test_zscore_method(self):
        """Test Z-score outlier detection"""
        cleaned_df = clean_outliers(
            self.test_data,
            columns=['NP3TOT', 'ENROLL_AGE'],
            method='zscore'
        )

        # Check if extreme values are handled
        self.assertTrue(cleaned_df['NP3TOT'].max() < 100)
        self.assertTrue(cleaned_df['ENROLL_AGE'].max() < 100)

        # Verify non-numeric columns remain unchanged
        pd.testing.assert_series_equal(
            self.test_data['COHORT'],
            cleaned_df['COHORT']
        )

    def test_iqr_method(self):
        """Test IQR outlier detection"""
        cleaned_df = clean_outliers(
            self.test_data,
            columns=['NP2SPCH', 'NP1DPRS'],
            method='iqr'
        )

        # Calculate expected IQR bounds
        q1_speech = self.test_data['NP2SPCH'].quantile(0.25)
        q3_speech = self.test_data['NP2SPCH'].quantile(0.75)
        iqr_speech = q3_speech - q1_speech
        upper_bound = q3_speech + 1.5 * iqr_speech

        # Verify outliers are handled
        self.assertTrue(cleaned_df['NP2SPCH'].max() <= upper_bound)
        self.assertTrue(cleaned_df['NP1DPRS'].std() < self.test_data['NP1DPRS'].std())

    def test_automatic_column_selection(self):
        """Test automatic numeric column selection"""
        cleaned_df = clean_outliers(self.test_data)

        # Should only process numeric columns
        self.assertTrue('COHORT' in cleaned_df.columns)
        self.assertTrue(cleaned_df['NP3TOT'].equals(self.test_data['NP3TOT']) == False)

    def test_report_generation(self):
        """Test outlier report generation"""
        cleaned_df = clean_outliers(self.test_data)
        report = generate_outlier_report(self.test_data, cleaned_df)

        # Verify report structure
        expected_columns = [
            'Column', 'Original_Mean', 'Cleaned_Mean',
            'Original_Std', 'Cleaned_Std', 'Points_Modified'
        ]
        self.assertTrue(all(col in report.columns for col in expected_columns))

        # Check if report identifies modifications
        self.assertTrue((report['Points_Modified'] > 0).any())

    def test_edge_cases(self):
        """Test edge cases and error handling"""
        # Empty DataFrame
        empty_df = pd.DataFrame()
        self.assertIsInstance(clean_outliers(empty_df), pd.DataFrame)

        # Single column DataFrame
        single_col_df = pd.DataFrame({'A': [1, 2, 3, 100]})
        cleaned_single = clean_outliers(single_col_df)
        self.assertTrue(cleaned_single['A'].max() < 100)

        # All null values
        null_df = pd.DataFrame({'A': [None, None, None]})
        cleaned_null = clean_outliers(null_df)
        self.assertTrue(cleaned_null['A'].isnull().all())

    def test_threshold_sensitivity(self):
        """Test different threshold values"""
        # Strict threshold
        strict_cleaned = clean_outliers(
            self.test_data,
            method='zscore',
            threshold=2
        )

        # Regular threshold
        regular_cleaned = clean_outliers(
            self.test_data,
            method='zscore',
            threshold=3
        )

        # Strict should remove more outliers
        self.assertTrue(
            strict_cleaned['NP3TOT'].std() < regular_cleaned['NP3TOT'].std()
        )

if __name__ == '__main__':
    unittest.main(verbosity=2)