# -*- coding: utf-8 -*-
"""clean_outlier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSrruPOtuk3-iM0GM2KUPeHp8WDRTgnb
"""

import pandas as pd
import numpy as np
from scipy import stats

def clean_outliers(df, columns=None, method='zscore', threshold=3):
    """
    Treat outliers in specified columns using various methods.

    Parameters:
    -----------
    df : pandas DataFrame
        Input dataset
    columns : list
        List of columns to clean for outliers. If None, treats all numeric columns
    method : str
        Method to use for outlier detection ('zscore', 'iqr', or 'isolation_forest')
    threshold : float
        Threshold for z-score method (default=3)

    Returns:
    --------
    pandas DataFrame
        Dataset with treated outliers
    """

    # Create a copy of the dataframe
    df_clean = df.copy()

    # If no columns specified, use all numeric columns
    if columns is None:
        columns = df.select_dtypes(include=[np.number]).columns

    def zscore_method(data):
        """Apply Z-score method"""
        z_scores = np.abs(stats.zscore(data, nan_policy='omit'))
        return z_scores < threshold

    def iqr_method(data):
        """Apply IQR method"""
        Q1 = data.quantile(0.25)
        Q3 = data.quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        return (data >= lower_bound) & (data <= upper_bound)

    for column in columns:
        if df_clean[column].dtype in [np.number]:
            if method == 'zscore':
                mask = zscore_method(df_clean[column])
                # Replace outliers with median
                df_clean.loc[~mask, column] = df_clean[column].median()

            elif method == 'iqr':
                mask = iqr_method(df_clean[column])
                # Replace outliers with median
                df_clean.loc[~mask, column] = df_clean[column].median()

            elif method == 'isolation_forest':
                from sklearn.ensemble import IsolationForest
                iso_forest = IsolationForest(contamination=0.1, random_state=42)
                yhat = iso_forest.fit_predict(df_clean[column].values.reshape(-1, 1))
                mask = yhat != -1
                # Replace outliers with median
                df_clean.loc[~mask, column] = df_clean[column].median()

    return df_clean

def generate_outlier_report(df_original, df_cleaned, columns=None):
    """
    Generate a report comparing original and cleaned data

    Parameters:
    -----------
    df_original : pandas DataFrame
        Original dataset
    df_cleaned : pandas DataFrame
        Cleaned dataset
    columns : list
        List of columns to include in report

    Returns:
    --------
    pandas DataFrame
        Report with statistics before and after cleaning
    """
    if columns is None:
        columns = df_original.select_dtypes(include=[np.number]).columns

    report_data = []
    for column in columns:
        orig_stats = df_original[column].describe()
        clean_stats = df_cleaned[column].describe()

        report_data.append({
            'Column': column,
            'Original_Mean': orig_stats['mean'],
            'Cleaned_Mean': clean_stats['mean'],
            'Original_Std': orig_stats['std'],
            'Cleaned_Std': clean_stats['std'],
            'Original_Min': orig_stats['min'],
            'Cleaned_Min': clean_stats['min'],
            'Original_Max': orig_stats['max'],
            'Cleaned_Max': clean_stats['max'],
            'Points_Modified': (df_original[column] != df_cleaned[column]).sum()
        })

    return pd.DataFrame(report_data)

if __name__ == "__main__":
    # Load the dataset
    df = pd.read_csv('merged__m_output.csv')

    # Columns to treat for outliers
    columns_to_treat = [
        'ENROLL_AGE', 'NP3TOT', 'NP1DPRS', 'NP1ANXS', 'NP1FATG',
        'NP2SPCH', 'NP2WALK', 'NP3GAIT', 'NP3BRADY'
    ]

    # Treat outliers using different methods
    df_cleaned_zscore = clean_outliers(df, columns_to_treat, method='zscore')
    df_cleaned_iqr = clean_outliers(df, columns_to_treat, method='iqr')

    # Generate reports
    zscore_report = generate_outlier_report(df, df_cleaned_zscore, columns_to_treat)
    iqr_report = generate_outlier_report(df, df_cleaned_iqr, columns_to_treat)

    # Save results
    df_cleaned_zscore.to_csv('cleaned_data_zscore.csv', index=False)
    df_cleaned_iqr.to_csv('cleaned_data_iqr.csv', index=False)
    zscore_report.to_csv('outlier_report_zscore.csv', index=False)
    iqr_report.to_csv('outlier_report_iqr.csv', index=False)

    print("Outlier treatment completed. Files saved:")
    print("- cleaned_data_zscore.csv")
    print("- cleaned_data_iqr.csv")
    print("- outlier_report_zscore.csv")
    print("- outlier_report_iqr.csv")